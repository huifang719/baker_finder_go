// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBaker = `-- name: CreateBaker :one
INSERT INTO bakers (id, img, name, address, suburb, postcode, contact, specialty, creator)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, img, name, address, suburb, postcode, contact, specialty, creator
`

type CreateBakerParams struct {
	ID        int32
	Img       sql.NullString
	Name      sql.NullString
	Address   sql.NullString
	Suburb    sql.NullString
	Postcode  sql.NullString
	Contact   sql.NullString
	Specialty sql.NullString
	Creator   sql.NullString
}

func (q *Queries) CreateBaker(ctx context.Context, arg CreateBakerParams) (Baker, error) {
	row := q.db.QueryRowContext(ctx, createBaker,
		arg.ID,
		arg.Img,
		arg.Name,
		arg.Address,
		arg.Suburb,
		arg.Postcode,
		arg.Contact,
		arg.Specialty,
		arg.Creator,
	)
	var i Baker
	err := row.Scan(
		&i.ID,
		&i.Img,
		&i.Name,
		&i.Address,
		&i.Suburb,
		&i.Postcode,
		&i.Contact,
		&i.Specialty,
		&i.Creator,
	)
	return i, err
}

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (id, baker_id, review, rating, user_name)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, baker_id, review, user_name, rating
`

type CreateReviewParams struct {
	ID       int32
	BakerID  sql.NullString
	Review   sql.NullString
	Rating   sql.NullString
	UserName sql.NullString
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.ID,
		arg.BakerID,
		arg.Review,
		arg.Rating,
		arg.UserName,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.BakerID,
		&i.Review,
		&i.UserName,
		&i.Rating,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, user_name, user_type, email, password_digest)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, user_name, user_type, email, password_digest
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	UserName       string
	UserType       string
	Email          string
	PasswordDigest string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserName,
		arg.UserType,
		arg.Email,
		arg.PasswordDigest,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.UserType,
		&i.Email,
		&i.PasswordDigest,
	)
	return i, err
}

const deleteBaker = `-- name: DeleteBaker :one
DELETE FROM bakers
WHERE id = $1
RETURNING id, img, name, address, suburb, postcode, contact, specialty, creator
`

func (q *Queries) DeleteBaker(ctx context.Context, id int32) (Baker, error) {
	row := q.db.QueryRowContext(ctx, deleteBaker, id)
	var i Baker
	err := row.Scan(
		&i.ID,
		&i.Img,
		&i.Name,
		&i.Address,
		&i.Suburb,
		&i.Postcode,
		&i.Contact,
		&i.Specialty,
		&i.Creator,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :one
DELETE FROM reviews
WHERE id = $1
RETURNING id, baker_id, review, user_name, rating
`

func (q *Queries) DeleteReview(ctx context.Context, id int32) (Review, error) {
	row := q.db.QueryRowContext(ctx, deleteReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.BakerID,
		&i.Review,
		&i.UserName,
		&i.Rating,
	)
	return i, err
}

const getAllReviews = `-- name: GetAllReviews :many
SELECT id, baker_id, review, user_name, rating FROM reviews
WHERE baker_id = $1
`

func (q *Queries) GetAllReviews(ctx context.Context, bakerID sql.NullString) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getAllReviews, bakerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.BakerID,
			&i.Review,
			&i.UserName,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
